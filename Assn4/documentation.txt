Table showing variation of number of transmissions with Drop ratio 

    ╔════════════╤═══════════════╤═══════════════╤═══════╗
    ║ Drop Ratio │ String Length │ Transmissions │ Ratio ║
    ╠════════════╪═══════════════╪═══════════════╪═══════╣
    ║     0      │      36       │      36       │   1   ║
    ╟────────────┼───────────────┼───────────────┼───────╢
    ║    0.05    │      36       │      38       │ 1.06  ║
    ╟────────────┼───────────────┼───────────────┼───────╢
    ║    0.1     │      36       │      38       │ 1.06  ║
    ╟────────────┼───────────────┼───────────────┼───────╢
    ║    0.15    │      36       │      46       │ 1.28  ║
    ╟────────────┼───────────────┼───────────────┼───────╢
    ║    0.2     │      36       │      51       │ 1.42  ║
    ╟────────────┼───────────────┼───────────────┼───────╢
    ║    0.25    │      36       │      59       │ 1.64  ║
    ╟────────────┼───────────────┼───────────────┼───────╢
    ║    0.3     │      36       │      71       │ 1.97  ║
    ╟────────────┼───────────────┼───────────────┼───────╢
    ║    0.35    │      36       │      79       │ 2.19  ║
    ╟────────────┼───────────────┼───────────────┼───────╢
    ║    0.4     │      36       │      93       │ 2.58  ║
    ╟────────────┼───────────────┼───────────────┼───────╢
    ║    0.45    │      36       │      104      │ 2.89  ║
    ╟────────────┼───────────────┼───────────────┼───────╢
    ║    0.5     │      36       │      126      │  3.5  ║
    ╚════════════╧═══════════════╧═══════════════╧═══════╝

Data Structures Used:

1. Message:
    a. messageId : Unique id assigned to each message
    b. sockfd : destination file descriptor associated with the message
    c. buf : message to be sent
    d. len : length of message to be sent
    e. flags : flags for sendto function
    f. retval : return value of sendto / recvfrom
    g. addr : target socket info
    h. sentTime : time at which message was last sent

2. unAckedMessageTable: 
    a. unackedTableMutex : mutex lock for accessing unacked message table
    b. unackedMessages : the array of messages
    c. size : size of the table

3. readMessageTable: 
    a. readTableMutex : mutex lock for accessing read message table
    b. unackedMessages : the array of messages
    c. size : size of the table

4. mrpSocket:
    a. myReadMessageTable : the associated read message table
    b. myUnackedMessageTable : the associated unacked message table
    c. R_id, S_id : ids of the R and S threads respectively
    d. sockfd : Sockfd associated with the socket

5. Global variables:
    a. global_lock : Lock for accessing global variables
    b. mySocket : the pointer for the socket
    c. ctr : counter for message ids 
    d. nTransmissions : Number of sendto calls made
    e. nMessages : Number of successful sendtos

Function descriptions

1. int dropMessage(float p) : Takes in a float p and returns 1 if random generated number < p, else it returns 0.

2. float getRandomFloat() : returns a uniformly distributed float value [0..1]

3. int isData(char* buf) : Check if the message is data message / ack message.

4. void handleExit(int signum) : Custom signal handler that handles SIGINT signals.

5. int extractMessageId(char *buf) : Extracts message id from buf.

6. void copyMessage(Message* dest, Message* src) : Copy src message to dest.

7. int addmessage(char *buf, int retval, struct sockaddr *cli_addr) : Adds message to read message table

8. void* routine_r(void* param): Runner for thread R. It does the following:
                                    Wait on recvfrom periodically
                                    If data message:
                                        add to read_msg_table
                                    else:
                                        remove from unacked_msg_table

9. void* routine_s(void* param) : Runner for thread S. It does the following:
                                    Check the unacked message table from time to time
                                    Resend the timed out messages
                                    
10. void initMessage(Message* myMessage) : Initialize a message.

11. void initSocket(mrpSocket* mySocket) : Initialize data structures and the mutex locks

12. int r_socket(int domain, int type, int protocol) : Initializes the socket. 
                                                        Create the data structures : 2 tables 
                                                        Create 2 threads : S and R

13. int r_bind(int sockfd, const struct sockaddr *addr, socklen_t addrlen) : Bind function for library

14. ssize_t r_sendto(int sockfd, const void *buf, size_t len, int flags, const struct sockaddr *dest_addr, socklen_t addrlen) :
                                                        Sendto function for our library. Does the following:
                                                        Sends the message and if successful, stores in unacked message table. 

15. ssize_t r_recvfrom(int sockfd, void *buf, size_t len, int flags, struct sockaddr *src_addr, socklen_t *addrlen) :
                                                        Recvfrom function for our library. Does the following:
                                                        while true :
                                                            if any message in read_msg_table
                                                                pop it
                                                                return 1st message
                                                            else
                                                                sleep

16. int r_close(int fd): Closes the socked associated with fd. Does the following:
                        1. Kills (and joins) R and S threads
                        2. Frees the socket.